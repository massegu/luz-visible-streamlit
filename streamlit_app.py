import streamlit as st
import matplotlib.pyplot as plt
import numpy as np

# Constantes f√≠sicas
h = 6.626e-34  # J¬∑s
c = 3e8        # m/s

# Diccionario de colores aproximados por longitud de onda
colores = {
    'Violeta': (380, 450, '#8B00FF'),
    'Azul': (450, 495, '#0000FF'),
    'Verde': (495, 570, '#00FF00'),
    'Amarillo': (570, 590, '#FFFF00'),
    'Naranja': (590, 620, '#FFA500'),
    'Rojo': (620, 750, '#FF0000')
}

valores_representativos = {
    nombre: (min_nm + max_nm) // 2
    for nombre, (min_nm, max_nm, _) in colores.items()
}

# Men√∫ lateral
seccion = st.sidebar.selectbox("üìÇ Navegaci√≥n", [
    "Propiedades f√≠sicas de la luz azul",
    "Comparaci√≥n: luz azul natural vs pantallas",
    "Visualizaci√≥n comparativa por color",
    "Analog√≠a: luz azul vs ola del mar"
])

# Secci√≥n 1
if seccion == "Propiedades f√≠sicas de la luz azul":
    st.title("üîµ Luz azul: propiedades f√≠sicas")
    st.markdown("""
    En este ejercicio, **la luz azul** se refiere a la radiaci√≥n visible emitida por **pantallas de tel√©fonos m√≥viles, ordenadores, tabletas y televisores LED**.

    Esta luz tiene una **longitud de onda corta (450‚Äì495 nm)** y una **energ√≠a relativamente alta**, lo que la hace perceptible como azul brillante.  
    Aunque es parte del espectro visible, su exposici√≥n prolongada puede tener efectos sobre el **sue√±o, la fatiga visual y el ritmo circadiano**.
    """)

    modo_log = st.radio("Modo de visualizaci√≥n:", ["Escala visual (normalizada)", "Escala real (logar√≠tmica)"])

    if modo_log == "Escala visual (normalizada)":
        # Datos normalizados
        longitud_onda_nm = [450, 495]
        frecuencia_THz = [606, 668]
        energia_J = [h * c / (l * 1e-9) for l in longitud_onda_nm]
        energia_norm = sum(energia_J) / 2 / 1e-19

        fig, ax = plt.subplots()
        ax.bar(['Longitud de onda (nm)', 'Frecuencia (THz)', 'Energ√≠a (J)'],
               [sum(longitud_onda_nm) / 2,
                sum(frecuencia_THz) / 2,
                energia_norm],
               color='blue')
        ax.set_title('Propiedades f√≠sicas de la luz azul (escaladas)')
        st.pyplot(fig)

    else:
        # Datos reales con escala logar√≠tmica
        longitudes_nm = [450, 495]
        frecuencias_Hz = [c / (l * 1e-9) for l in longitudes_nm]
        energias_J = [h * f for f in frecuencias_Hz]

        valores = [
            sum(longitudes_nm) / 2,
            sum(frecuencias_Hz) / 2,
            sum(energias_J) / 2
        ]

        labels = ['Longitud de onda (nm)', 'Frecuencia (Hz)', 'Energ√≠a (J)']

        fig, ax = plt.subplots()
        ax.bar(labels, valores, color='blue')
        ax.set_yscale('log')
        ax.set_title('Propiedades f√≠sicas de la luz azul (escala logar√≠tmica)')
        st.pyplot(fig)

    st.markdown("""
    üîç **¬øPor qu√© la energ√≠a en julios parece tan peque√±a?**

    La energ√≠a de un fot√≥n azul es del orden de \(10^{-19}\) julios, lo que la hace casi invisible en una escala lineal.  
    Por eso usamos escalas logar√≠tmicas o normalizaciones para visualizarla junto a otras propiedades como la frecuencia o la longitud de onda.
    """)

# Secci√≥n 2
elif seccion == "Comparaci√≥n: luz azul natural vs pantallas":
    st.title("üå§üì± Comparaci√≥n de luz azul: natural vs pantallas")

    fuentes = {
        "Luz azul natural (cielo)": 470,
        "Luz azul artificial (pantallas)": 455
    }

    filtro_activo = st.checkbox("üï∂Ô∏è Activar filtro de luz azul")

    fig, ax = plt.subplots(figsize=(8, 5))
    for fuente, long_nm in fuentes.items():
        long_m = long_nm * 1e-9
        frecuencia = c / long_m
        energia = h * frecuencia
        energia_norm = energia / 1e-19

        if filtro_activo and fuente == "Luz azul artificial (pantallas)":
            energia_norm *= 0.4

        ax.bar(fuente, energia_norm, color='blue' if "natural" in fuente else 'deepskyblue')

    ax.set_ylabel("Energ√≠a normalizada (simulada)")
    ax.set_title("Comparaci√≥n de energ√≠a entre fuentes de luz azul")
    st.pyplot(fig)

    st.markdown(f"""
    **üå§ Luz azul natural (cielo):** ~470 nm  
    **üì± Luz azul artificial (pantallas):** ~455 nm  
    **üï∂Ô∏è Filtro activado:** {"S√≠" if filtro_activo else "No"}  
    """)

# Secci√≥n 3
elif seccion == "Visualizaci√≥n comparativa por color":
    st.title("üé® Comparaci√≥n f√≠sica por color de luz")
    color_seleccionado = st.selectbox("Selecciona un color:", list(valores_representativos.keys()))
    long_nm = valores_representativos[color_seleccionado]

    long_m = long_nm * 1e-9
    frecuencia = c / long_m
    energia = h * frecuencia

    freq_norm = frecuencia / 1e14
    energia_norm = energia / 1e-19
    long_norm = long_nm / 100

    color_hex = colores[color_seleccionado][2]

    fig, ax = plt.subplots(figsize=(8, 4))
    ax.bar('Longitud de onda (Œª)', long_norm, color='gray')
    ax.bar('Frecuencia (f)', freq_norm, color='skyblue')
    ax.bar('Energ√≠a (E)', energia_norm, color=color_hex)
    ax.set_title(f'Propiedades de la luz ({long_nm} nm)', color='black')
    ax.set_ylabel('Valor normalizado')
    st.pyplot(fig)

    st.markdown(f"""
    **üìè Longitud de onda:** {long_nm} nm  
    **üì° Frecuencia:** {frecuencia:.2e} Hz  
    **‚ö° Energ√≠a:** {energia:.2e} J  
    **üé® Color percibido:** {color_seleccionado}
    """)
    
 # Secci√≥n 4

elif seccion == "Analog√≠a: luz azul vs ola del mar":
    st.title("üåäüîµ Analog√≠a: luz azul vs ola del mar")

    st.markdown("""
    Esta visualizaci√≥n compara una **ola del mar** con una **onda de luz azul** para entender tres conceptos clave:

    - üìè **Longitud de onda**: distancia entre crestas.
    - üîÅ **Frecuencia**: n√∫mero de ciclos por segundo.
    - ‚ö° **Energ√≠a**: proporcional a la frecuencia.

    Puedes modificar la **longitud de onda de la luz azul** para ver c√≥mo cambia su frecuencia.
    """)

    # Slider para longitud de onda de la luz azul
    long_nm = st.slider("Longitud de onda de la luz azul (nm)", min_value=380, max_value=495, value=470, step=5)
    long_m = long_nm * 1e-9
    frecuencia_luz = c / long_m
    energia_luz = h * frecuencia_luz

    # Simulaci√≥n de ondas
    x = np.linspace(0, 4 * np.pi, 500)
    mar = np.sin(1.0 * x)  # frecuencia baja y fija
    luz = 0.3 * np.sin((frecuencia_luz / 1e15) * x)  # frecuencia variable

    fig, ax = plt.subplots(figsize=(10, 4))
    ax.plot(x, mar, label='üåä Ola del mar (frecuencia baja)', color='deepskyblue', linewidth=2)
    ax.plot(x, luz, label=f'üîµ Luz azul ({long_nm} nm)', color='blue', linewidth=1.5)
    ax.set_title("Comparaci√≥n de ondas: mar vs luz azul")
    ax.set_xlabel("Espacio (simulado)")
    ax.set_ylabel("Amplitud")
    ax.legend()
    ax.grid(True)
    st.pyplot(fig)

    st.markdown(f"""
    ### üîç Observaciones

    - Longitud de onda seleccionada: **{long_nm} nm**
    - Frecuencia calculada: **{frecuencia_luz:.2e} Hz**
    - Energ√≠a del fot√≥n: **{energia_luz:.2e} J**

    A medida que disminuye la longitud de onda de la luz, su frecuencia aumenta.  
    Esto se traduce en **m√°s ciclos por segundo** y **mayor energ√≠a por fot√≥n**.

    La ola del mar permanece constante como referencia perceptiva.
    """)

    st.markdown("""
    ### üß™ Preguntas guiadas

    1. ¬øQu√© ocurre con la frecuencia de la luz azul cuando disminuyes su longitud de onda?
    2. ¬øPor qu√© la luz azul tiene m√°s energ√≠a que la luz roja?
    3. ¬øQu√© implicaciones tiene esto para la retina y los filtros de luz azul?
    4. ¬øC√≥mo se relaciona esta analog√≠a con la percepci√≥n visual y el dise√±o de pantallas?
    """)
